# Hybrid Dockerfile using Cloud Native Buildpacks
# This approach uses buildpacks to handle the build process, then packages for deployment

# Stage 1: Build with buildpacks
FROM heroku/buildpacks:20 as builder

# Set build environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV NPM_CONFIG_PRODUCTION=false

# Copy application code
COPY . .

# Buildpacks will handle the build process automatically
# This includes:
# - Node.js version detection and installation
# - Dependency installation (npm ci)
# - Next.js build process
# - Module resolution automatically handled

# Stage 2: Production image
FROM node:20-alpine

# Install runtime and build dependencies
RUN apk add --no-cache libc6-compat go git curl

# Set production environment
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV NEXT_TELEMETRY_DISABLED=1

# Create app directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder /app ./

# Build the proxy server
RUN cd proxy-m3u8 && go build -o proxy-server cmd/main.go

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Change ownership of the app directory
RUN chown -R nextjs:nodejs /app
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Start the application with concurrent proxy
CMD ["npm", "run", "start:production"]